---
# This playbook handles publishing a AdminAggregator control message.

- hosts: localhost
  vars:
    censusEnvironment: "ps2"
    hostname: "localhost"
    user: "guest"
    password: "guest"
    vhost: "%2F"
    world: ""
    zone: ""
    valid_worlds: ["1", "10", "13", "17", "19", "40", "1000", "2000"]
    valid_zones: ["2", "4", "6", "8", "10", "344"]
    valid_factions: ["0", "1", "2", "3"]
    valid_metagame_types: ["territory", "outfitwars"]
  vars_prompt:
    - name: action
      prompt: "Select message type (start, end, endAll, actives)"
      private: no
      default: "start"

    - name: type
      prompt: "[start] Select type of instance to start ({{ valid_metagame_types }})"
      private: no
      default: "territory"

    - name: world
      prompt: "[start] Select world ({{ valid_worlds }})"
      private: no
      default: 19

    - name: zone
      prompt: "[start] Select zone ({{ valid_zones }})"
      private: no
      default: 2

    - name: duration
      prompt: "[start] Specify duration in minutes (1-90)"
      private: no
      default: 90

    - name: faction
      prompt: "[start] Select triggering faction from ({{ valid_factions }})"
      private: no
      default: 1

    - name: instanceId
      prompt: "[end] Specify PS2Alerts Instance ID to end"
      private: no

    - name: env
      prompt: "Select environment to send message to (development, staging, production)"
      private: no
      default: "development"

    - name: census_env
      prompt: "Select Census Environment (ps2, ps2ps4eu, ps2ps4us)"
      private: no
      default: "ps2"
  tasks:
    - name: Ensure world is valid if start type
      fail:
        msg: "World isn't valid!"
      when: action == "start" and world not in valid_worlds

    - name: Ensure zone is valid if start type
      fail:
        msg: "Zone isn't valid!"
      when: action == "start" and zone is not in valid_zones

    - name: Ensure faction is valid if start type
      fail:
        msg: "Faction isn't valid!"
      when: action == "start" and faction is not in valid_factions

    - name: If outfit wars type, ensure duration is a maximum of 45m
      fail:
        msg: "Outfit wars alerts cannot be more than 45 minutes in duration"
      when: type == "outfitwars" and duration | int > 45

    - name: If outfit wars type, ensure zone is 10
      fail:
        msg: "Outfit wars alerts must be started on zone 10"
      when: type == "outfitwars" and zone != "10"

    - name: Generate instance ID(s)
      set_fact:
        instanceId: "{{ 100000 | random }}"
        zoneInstanceId: "{{ 100 | random }}"
      when: action == "start"

    - name: If outfit wars type, ensure zone is a instance zone definition
      set_fact:
        zone: "{{ zoneInstanceId | masked_instance_id }}"
      when: type == "outfitwars"

    - name: Create start message body
      set_fact:
        message:
          eventName: "AdminMessage"
          payload:
            action: "start"
            body:
              instanceId: "{{ instanceId }}"
              world: "{{ world }}"
              zone: "{{ zone }}"
              faction: "{{ faction }}"
              start: "{{ ansible_date_time.epoch }}"
              duration: "{{ duration|int * 60 }}"
              metagameType: "{{ type }}"
      when: action == "start"

    - name: Create end message body
      set_fact:
        message:
          eventName: "AdminMessage"
          payload:
            action: "end"
            body:
              instanceId: "{{ instanceId }}"
      when: action == "end"

    - name: Create endAll message body
      set_fact:
        message:
          eventName: "AdminMessage"
          payload:
            action: "endAll"
      when: action == "endAll"

    - name: Create activeInstances message body
      set_fact:
        message:
          eventName: "AdminMessage"
          payload:
            action: "actives"
      when: action == "active"

    - name: Set up queue name
      set_fact:
        queue_name: "aggregator-admin-{{ env }}-{{ census_env }}"

    - name: Set hostname if staging or production, set correct hostname and password
      set_fact:
        hostname: "queues.ps2alerts.com"
        user: "{{ rabbit.user }}"
        password: "{{ rabbit.password }}"
        vhost: "ps2alerts"
      when: env == "staging" or env == "production"

    - debug:
        msg: "Sending message to: {{ user }}:{{ password }}@{{ hostname }}{{ vhost }} - {{ queue_name }}"

    - debug:
        msg: "{{ message }}"

    - debug:
        msg: "zoneInstanceId: {{ zoneInstanceId }}"
      when: type == "outfitwars"

    - name: Publish Instance message
      rabbitmq_publish:
        queue: "{{ queue_name }}"
        body: "{{ message | to_json }}"
        proto: amqp
        host: "{{ hostname }}"
        port: 5672
        username: "{{ user }}"
        password: "{{ password }}"
        vhost: "{{ vhost }}"
        durable: false
