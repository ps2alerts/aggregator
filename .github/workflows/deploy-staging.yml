---
name: Build & Deploy Staging
on:
  push:
    branches: [staging]
jobs:
  build-docker-images:
    runs-on: ubuntu-latest
    steps:
      - name: Get short SHA
          id: sha
          run: echo "::set-output name=sha8::$(echo ${GITHUB_SHA} | cut -c1-8)"

      - name: Checkout
        uses: actions/checkout@v1

      - name: Build base image
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          path: provisioning/base
          repository: maelstromeous/applications
          tags: ps2alerts-websocket-base

      - name: Build staging image
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: maelstromeous/applications
          dockerfile: provisioning/staging/Dockerfile
          always_pull: true
          tags: ps2alerts-websocket-staging-${{ steps.sha.outputs.sha8 }}

  deploy-terraform:
    needs:
      - build-docker-images
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: provisioning/terraform
    steps:
      - name: Get short SHA
        id: sha
        run: echo "::set-output name=sha8::$(echo ${GITHUB_SHA} | cut -c1-8)"

      - name: Checkout
        uses: actions/checkout@v2

      # Install the latest version of Terraform CLI and configure the Terraform
      # CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TERRAFORM_CLOUD_TOKEN }}

      # Initialize a new or existing Terraform working directory by creating initial
      # files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check

      # Generates an execution plan for Terraform, with the injected SHA
      - name: Terraform Plan
        run: >
          terraform plan \
            -var='checksum_version=${{ steps.sha.outputs.sha8 }}' \
            -var='db_user=${{ secrets.DB_USER }}' \
            -var='db_pass=${{ secrets.DB_PASS }}' \
            -var='census_service_id=${{ secrets.CENSUS_SERVICE_ID }}' \
            -target=module.websocket_staging -out='.tfout'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}

      # Apply the terraform plan and inject the SHA
      - name: Terraform Apply
        if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
        run: terraform apply -auto-approve .tfout
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}

  # Unfortunately we need to do this step in order to provision the LE cert manager.
  # Terraform currently doesn't support it :'(
  deploy-cert-manager:
    needs:
      - deploy-terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_TOKEN }}

      - name: Save DO kubeconfig
        run: doctl kubernetes cluster kubeconfig save my-cluster

      - name: Apply Lets Encrypt cluster issuer manifest
        run: kubectl apply -f provisioning/staging/k8s/manifests/cluster-issuer.yml
